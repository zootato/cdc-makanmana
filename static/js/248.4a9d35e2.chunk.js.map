{"version":3,"file":"static/js/248.4a9d35e2.chunk.js","mappings":"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","sources":["services/halalService.ts"],"sourcesContent":["import { Merchant } from '../data/merchants';\n\ninterface HalalEstablishment {\n  name: string;\n  address: string;\n  type: string;\n  number: string;\n  scheme: string;\n  id: string;\n  postal: string;\n}\n\nexport class HalalService {\n  private static halalEstablishments: HalalEstablishment[] = [];\n  private static initialized = false;\n\n  static async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Fetch directly from GitHub API endpoint\n      const response = await fetch('https://raw.githubusercontent.com/zootato/singapore-halal-establishments/main/halal_establishments.json');\n\n      if (!response.ok) {\n        throw new Error(`GitHub API returned ${response.status}`);\n      }\n\n      this.halalEstablishments = await response.json();\n      this.initialized = true;\n      console.log(`Loaded ${this.halalEstablishments.length} halal establishments from GitHub`);\n    } catch (error) {\n      console.error('Failed to load halal establishments from GitHub:', error);\n      this.halalEstablishments = [];\n      this.initialized = true;\n    }\n  }\n\n  static async isHalal(merchant: Merchant): Promise<{ isHalal: boolean; source: string; certNumber?: string }> {\n    await this.initialize();\n\n    // Try to match by postal code first (most reliable)\n    const postalMatch = this.halalEstablishments.find(halal =>\n      halal.postal === merchant.postalCode\n    );\n\n    if (postalMatch) {\n      // Double check with name similarity for postal matches\n      if (this.namesAreSimilar(merchant.name, postalMatch.name)) {\n        return {\n          isHalal: true,\n          source: 'MUIS_VERIFIED_POSTAL_NAME',\n          certNumber: postalMatch.number\n        };\n      }\n      // Even if names don't match exactly, postal code match is strong indicator\n      return {\n        isHalal: true,\n        source: 'MUIS_VERIFIED_POSTAL',\n        certNumber: postalMatch.number\n      };\n    }\n\n    // Try to match by name similarity\n    const nameMatch = this.findBestNameMatch(merchant.name);\n    if (nameMatch) {\n      return {\n        isHalal: true,\n        source: 'MUIS_VERIFIED_NAME',\n        certNumber: nameMatch.number\n      };\n    }\n\n    // Fallback to keyword detection for potential halal establishments\n    if (this.detectHalalKeywords(merchant.name)) {\n      return {\n        isHalal: true,\n        source: 'KEYWORD_DETECTED'\n      };\n    }\n\n    return {\n      isHalal: false,\n      source: 'NOT_DETECTED'\n    };\n  }\n\n  private static findBestNameMatch(merchantName: string): HalalEstablishment | null {\n    const cleanMerchantName = this.cleanName(merchantName);\n\n    // Direct exact match\n    let bestMatch = this.halalEstablishments.find(halal =>\n      this.cleanName(halal.name) === cleanMerchantName\n    );\n\n    if (bestMatch) return bestMatch;\n\n    // Partial word matching\n    const merchantWords = cleanMerchantName.split(' ').filter(word => word.length > 2);\n\n    for (const halal of this.halalEstablishments) {\n      const halalWords = this.cleanName(halal.name).split(' ').filter(word => word.length > 2);\n\n      // Check if at least 60% of merchant words match halal words\n      const matchingWords = merchantWords.filter(word =>\n        halalWords.some(halalWord =>\n          halalWord.includes(word) || word.includes(halalWord)\n        )\n      );\n\n      if (matchingWords.length >= Math.min(2, merchantWords.length * 0.6)) {\n        return halal;\n      }\n    }\n\n    return null;\n  }\n\n  private static cleanName(name: string): string {\n    return name\n      .toLowerCase()\n      .replace(/\\b(pte|ltd|private|limited|sdn|bhd)\\b/g, '')\n      .replace(/\\b(stall|#|unit|\\d+[a-z]?)\\s*\\d+/g, '')\n      .replace(/[^\\w\\s]/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  private static namesAreSimilar(name1: string, name2: string): boolean {\n    const clean1 = this.cleanName(name1);\n    const clean2 = this.cleanName(name2);\n\n    // Exact match\n    if (clean1 === clean2) return true;\n\n    // One contains the other\n    if (clean1.includes(clean2) || clean2.includes(clean1)) return true;\n\n    // Word-based similarity\n    const words1 = clean1.split(' ').filter(w => w.length > 2);\n    const words2 = clean2.split(' ').filter(w => w.length > 2);\n\n    if (words1.length === 0 || words2.length === 0) return false;\n\n    const commonWords = words1.filter(word =>\n      words2.some(w2 => w2.includes(word) || word.includes(w2))\n    );\n\n    return commonWords.length >= Math.min(words1.length, words2.length) * 0.5;\n  }\n\n  private static detectHalalKeywords(name: string): boolean {\n    const halalKeywords = [\n      'halal', 'muslim', 'islamic', 'bismillah', 'salam', 'warung',\n      'nasi padang', 'makan', 'ayam', 'kambing', 'rendang', 'satay',\n      'kebab', 'turkish', 'arab', 'middle east', 'biryani', 'roti prata'\n    ];\n\n    const lowerName = name.toLowerCase();\n    return halalKeywords.some(keyword => lowerName.includes(keyword));\n  }\n}"],"names":["HalalService","initialize","this","initialized","response","fetch","ok","Error","concat","status","halalEstablishments","json","console","log","length","error","isHalal","merchant","postalMatch","find","halal","postal","postalCode","namesAreSimilar","name","source","certNumber","number","nameMatch","findBestNameMatch","detectHalalKeywords","merchantName","cleanMerchantName","cleanName","bestMatch","merchantWords","split","filter","word","halalWords","some","halalWord","includes","Math","min","toLowerCase","replace","trim","name1","name2","clean1","clean2","words1","w","words2","w2","lowerName","keyword"],"sourceRoot":""}