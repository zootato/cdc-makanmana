{"version":3,"file":"static/js/124.9bc4aae6.chunk.js","mappings":"+JA+BO,MAAMA,EAKX,2BAAaC,CAAeC,EAAsBC,GAChD,IAAKC,KAAKC,oBAER,OADAC,QAAQC,KAAK,sCACN,KAGT,IAEE,MAAMC,EAAW,GAAAC,OAAMP,EAAY,KAAAO,OAAIN,EAAO,cACxCO,QAAuBC,MAAM,GAADF,OAC7BL,KAAKQ,eAAc,2BAAAH,OAA0BI,mBAAmBL,GAAY,SAAAC,OAAQL,KAAKC,sBAG9F,IAAKK,EAAeI,GAAI,OAAO,KAE/B,MAAMC,QAAmBL,EAAeM,OAExC,GAAID,EAAWE,SAAWF,EAAWE,QAAQC,OAAS,EAAG,CAAC,IAADC,EACvD,MAAMC,EAAUL,EAAWE,QAAQ,GAAGI,SAGhCC,QAAwBX,MAAM,GAADF,OAC9BL,KAAKQ,eAAc,2BAAAH,OAA0BW,EAAO,uCAAAX,OAAsCL,KAAKC,sBAGpG,IAAKiB,EAAgBR,GAAI,OAAO,KAIhC,OAAyB,QAAlBK,SAFmBG,EAAgBN,QAEvBO,cAAM,IAAAJ,OAAA,EAAlBA,EAAoBK,yBAA0B,IACvD,CAEA,OAAO,IACT,CAAE,MAAOC,GAEP,OADAnB,QAAQmB,MAAM,yBAA0BA,GACjC,IACT,CACF,EA1CWzB,EACaK,oBAAsBqB,CAAAA,SAAAA,aAAAA,WAAAA,iBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,8BAD/C3B,EAEaY,eAAiB,6CA8CpC,MAAMgB,EAKX,4BAAaC,CAAgB3B,EAAsBC,GACjD,IAEE,MAAMO,QAAuBC,MAAM,GAADF,OAC7BL,KAAK0B,WAAU,eAAArB,OAAcI,mBAAmBX,EAAe,IAAMC,GAAQ,mCAGlF,IAAKO,EAAeI,GAAI,OAAO,KAE/B,MAAMC,QAAmBL,EAAeM,OAExC,GAAID,EAAWgB,MAAQ,GAAKhB,EAAWE,QAAQC,OAAS,EAAG,CACzD,MAAMK,EAASR,EAAWE,QAAQ,GAG5Be,EAAmC,CACvCC,KAAMV,EAAOW,WAAahC,EAC1BC,QAASoB,EAAOY,SAAWhC,EAC3BiC,OAAQb,EAAOc,QAAU,GACzBC,MAAOf,EAAOgB,YAASC,EACvBC,SAAUlB,EAAOmB,eAAYF,GAQ/B,OAFAR,EAAaW,gBAAkBvC,KAAKwC,0BAA0BrB,EAAOmB,UAAYxC,GAE1E8B,CACT,CAEA,OAAO,IACT,CAAE,MAAOP,GAEP,OADAnB,QAAQmB,MAAM,oBAAqBA,GAC5B,IACT,CACF,CAGA,gCAAemB,CAA0BH,GACvC,MAAMI,EAAMJ,EAASK,cAErB,OAAID,EAAIE,SAAS,eAAiBF,EAAIE,SAAS,SAAWF,EAAIE,SAAS,UAC9D,CACLC,OAAQ,cACRC,QAAS,cACTC,UAAW,cACXC,SAAU,cACVC,OAAQ,cACRC,SAAU,cACVC,OAAQ,eAIRT,EAAIE,SAAS,WAAaF,EAAIE,SAAS,SAAWF,EAAIE,SAAS,aAC1D,CACLC,OAAQ,cACRC,QAAS,cACTC,UAAW,cACXC,SAAU,cACVC,OAAQ,cACRC,SAAU,cACVC,OAAQ,eAIRT,EAAIE,SAAS,gBAAkBF,EAAIE,SAAS,YAAcF,EAAIE,SAAS,QAClE,CACLC,OAAQ,cACRC,QAAS,cACTC,UAAW,cACXC,SAAU,cACVC,OAAQ,cACRC,SAAU,cACVC,OAAQ,eAIRT,EAAIE,SAAS,YAAcF,EAAIE,SAAS,QAAUF,EAAIE,SAAS,YAC1D,CACLC,OAAQ,cACRC,QAAS,cACTC,UAAW,cACXC,SAAU,cACVC,OAAQ,cACRC,SAAU,cACVC,OAAQ,eAKL,CACLN,OAAQ,cACRC,QAAS,cACTC,UAAW,cACXC,SAAU,cACVC,OAAQ,cACRC,SAAU,cACVC,OAAQ,SAEZ,EAzGW1B,EACa2B,SAAW,4DADxB3B,EAEaE,WAAa,gDA2GhC,MAAM0B,EASX,6BAAaC,CAAiBvD,EAAsBC,GAClD,IAEE,MAAMuD,EAAW,GAAAjD,OAAGP,EAAY,KAAAO,OAAIN,GAAU2C,cACa,IAADa,EAA1D,GAAIvD,KAAKwD,WAAWC,IAAIH,IAAatD,KAAK0D,eACxC,OAAoC,QAA7BH,EAAAvD,KAAKwD,WAAWG,IAAIL,UAAS,IAAAC,OAAA,EAA7BA,EAA+BK,WAAW,EAInD,MAAMC,QAAmB7D,KAAK8D,aAAahE,GAE3C,GAAmB,OAAf+D,EAKF,OAHA7D,KAAKwD,WAAWO,IAAIT,EAAU,CAAEM,QAASC,EAAWD,QAASI,QAASH,EAAWG,UACjFhE,KAAKiE,gBAAkB,IAAIC,KAC3BhE,QAAQiE,IAAI,6BAAD9D,OAAyBP,EAAY,OAAAO,OAAMwD,EAAWD,QAAU,QAAU,kBAC9EC,EAAWD,QAIpB1D,QAAQC,KAAK,oCAADE,OAA2BP,EAAY,8BACnD,MAAMsE,QAAsBpE,KAAKqE,qBAAqBvE,EAAcC,GAMpE,OAHAC,KAAKwD,WAAWO,IAAIT,EAAU,CAAEM,QAASQ,EAAeJ,QAAS,OACjEhE,KAAKiE,gBAAkB,IAAIC,KAEpBE,CACT,CAAE,MAAO/C,GAGP,OAFAnB,QAAQmB,MAAM,0BAA2BA,GAElCrB,KAAKqE,qBAAqBvE,EAAcC,EACjD,CACF,CAGA,yBAAqB+D,CAAahE,GAChC,IAEE,MAAMwE,EAA2B,qBAAXC,OAAyBvE,KAAKwE,eAAiBxE,KAAKyE,aAEpEC,QAAiBnE,MAAM+D,EAAQ,CACnCK,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,oBAEZC,KAAMC,KAAKC,UAAU,CACnBC,KAAMlF,EAAamF,WAIvB,IAAKP,EAAShE,GAOZ,OANwB,MAApBgE,EAASQ,QACXhF,QAAQC,KAAK,8CAADE,OAAqCqE,EAASQ,OAAM,WAAA7E,OAAUP,IAC1EI,QAAQiF,KAAK,8EAEbjF,QAAQC,KAAK,qBAADE,OAAsBqE,EAASQ,OAAM,UAAA7E,OAASP,IAErD,KAGT,MAAMsF,QAAoBV,EAAS9D,OAGnC,IAAIyE,EAAiB,GAUrB,GATID,EAAYvE,SAAWyE,MAAMC,QAAQH,EAAYvE,UAEnDwE,EAAiBD,EAAYvE,QAC7BX,QAAQiE,IAAI,uCAAD9D,OAA8B+E,EAAYI,aAAY,oBACxDJ,EAAYK,MAAQH,MAAMC,QAAQH,EAAYK,QAEvDJ,EAAiBD,EAAYK,MAGD,IAA1BJ,EAAevE,OAEjB,MAAO,CACL8C,SAAS,EACTI,QAAS,MAKX,MAAM0B,EAAoB5F,EAAa4C,cACjCiD,EAAwBN,EAAeO,KAAMC,IACjD,MAAMC,EAAoBD,EAAchE,KAAKa,cAG7C,GAAIoD,EAAkBnD,SAAS+C,IAAsBA,EAAkB/C,SAASmD,GAC9E,OAAO,EAIT,MAAMC,EAAoBL,EACvBM,QAAQ,yEAA0E,IAClFf,OACGgB,EAAyBH,EAC5BE,QAAQ,yEAA0E,IAClFf,OAGH,GAAIc,EAAkBjF,QAAU,GAAKmF,EAAuBnF,QAAU,EAAG,CAEvE,GAAImF,EAAuBtD,SAASoD,IAChCA,EAAkBpD,SAASsD,GAC7B,OAAO,EAIT,MAAMC,EAAgBH,EAAkBI,MAAM,KAAKC,OAAQC,GAAiBA,EAAKvF,QAAU,GACrFwF,EAAqBL,EAAuBE,MAAM,KAAKC,OAAQC,GAAiBA,EAAKvF,QAAU,GAG/FyF,EAAgBL,EAAcE,OAAQC,GAC1CC,EAAmBE,KAAMC,GAAoBA,EAAQ9D,SAAS0D,IAASA,EAAK1D,SAAS8D,KAGvF,GAAIF,EAAczF,QAAU,GACvBoF,EAAcpF,QAAU,GAAKyF,EAAczF,QAAU,EACxD,OAAO,CAEX,CAEA,OAAO,IAGT,OAAI6E,GACFzF,QAAQiE,IAAI,+BAAD9D,OAAsBP,EAAY,cAAAO,OAAasF,EAAsB9D,KAAI,aAAAxB,OAAYsF,EAAsBe,OAAM,MACrH,CACL9C,SAAS,EACTI,QAAS,CACP2C,qBAAsBhB,EACtBiB,WAAYvB,EAAevE,OAC3B+F,cAAexB,MAMrBnF,QAAQiE,IAAI,4BAAD9D,OAAmBgF,EAAevE,OAAM,kBAAAT,OAAiBP,EAAY,2BACzE,CACL8D,SAAS,EACTI,QAAS,CACP6C,cAAexB,EACfuB,WAAYvB,EAAevE,SAQnC,CAAE,MAAOO,GAQP,OANIA,aAAiByF,WAAazF,EAAM0F,QAAQpE,SAAS,oBACvDzC,QAAQC,KAAK,2CAADE,OAAkCP,EAAY,kDAC1DI,QAAQiF,KAAK,sFAEbjF,QAAQmB,MAAM,0BAA2BA,GAEpC,IACT,CACF,CAGA,wCAAa2F,CAA4BlH,EAAsBC,GAC7D,IAEE,GAAsB,qBAAXwE,SAA2BvE,KAAKiH,yBAA0B,CAEnE,MAAM7C,QAAsBpE,KAAKqE,qBAAqBvE,EAAcC,GACpE,MAAO,CACL6D,QAASQ,EACT8C,OAAQ9C,EAAgB,mBAAqB,eAEjD,CAGA,MAAM2B,EAAoB/F,KAAKmH,2BAA2BrH,GAC1DI,QAAQiE,IAAI,qDAAD9D,OAA4CP,EAAY,iBAAAO,OAAgB0F,EAAiB,OACpG,MAAMlC,QAAmB7D,KAAK8D,aAAaiC,GAE3C,GAAmB,OAAflC,EAAqB,CACvB,MAAMqD,EAASrD,EAAWD,QAAU,gBAAkB,iBAEtD,OADA1D,QAAQiE,IAAI,iCAAD9D,OAAwBP,EAAY,OAAAO,OAAMwD,EAAWD,QAAU,kBAAoB,gBAAe,MAAAvD,OAAK6G,EAAM,MACjH,CACLtD,QAASC,EAAWD,QACpBsD,OAAQA,EAEZ,CAGAhH,QAAQiF,KAAK,4EAAD9E,OAAmEP,IAC/E,MAAMsE,QAAsBpE,KAAKqE,qBAAqBvE,EAAcC,GACpE,MAAO,CACL6D,QAASQ,EACT8C,OAAQ9C,EAAgB,mBAAqB,eAGjD,CAAE,MAAO/C,GACPnB,QAAQmB,MAAM,4CAA6CA,GAE3D,MAAM+C,QAAsBpE,KAAKqE,qBAAqBvE,EAAcC,GACpE,MAAO,CACL6D,QAASQ,EACT8C,OAAQ9C,EAAgB,mBAAqB,eAEjD,CACF,CAGA,iCAAe+C,CAA2BrH,GACxC,OAAOA,EAEJkG,QAAQ,+CAAgD,IAExDA,QAAQ,4BAA6B,IAErCf,OAEAkB,MAAM,KACNiB,MAAM,EAAG,GACTC,KAAK,KACLpC,MACL,CAGA,iCAAqBZ,CAAqBvE,EAAsBC,GAC9D,MAAMiF,EAAO,GAAA3E,OAAGP,EAAY,KAAAO,OAAIN,GAAU2C,cA4B1C,OANyB,CACvB,OAAQ,QAAS,MAAO,YAAa,UACrC,OAAQ,OAAQ,UAAW,MAAO,OAIf8D,KAAKc,GAAWtC,EAAKrC,SAAS2E,KA1B7B,CAEpB,QAAS,SAAU,UAAW,YAAa,UAAW,QAGtD,UAAW,OAAQ,UAAW,cAAe,WAAY,WACzD,YAAa,SAAU,UAAW,UAGlC,SAAU,cAAe,QAAS,SAAU,QAC5C,UAAW,QAAS,YAAa,aAAc,QAG/C,UAAW,UAAW,SAAU,QAAS,QAGzC,MAAO,MAAO,MAAO,UAAW,QAAS,WACzC,SAAU,QAAS,QAAS,SAAU,UAcnBd,KAAKc,GAAWtC,EAAKrC,SAAS2E,GACrD,CAGA,yCAAaC,CAA6BzH,GACxC,IAIE,OADAI,QAAQiE,IAAI,mCAAD9D,OAAoCP,IACxC,IACT,CAAE,MAAOuB,GAEP,OADAnB,QAAQmB,MAAM,oCAAqCA,GAC5C,IACT,CACF,CAEA,mBAAeqC,GACb,QAAK1D,KAAKiE,iBACFC,KAAKsD,MAAQxH,KAAKiE,gBAAgBwD,UAAazH,KAAK0H,cAC9D,CAGA,iBAAOC,GACL3H,KAAKwD,WAAWoE,QAChB5H,KAAKiE,gBAAkB,IACzB,EAxSWb,EACaqB,aAAe,qDAD5BrB,EAEII,WAA8D,IAAIqE,IAFtEzE,EAGIa,gBAA+B,KAHnCb,EAIasE,eAAiB,MAJ9BtE,EAKa6D,0BAA2B,EALxC7D,EAMaoB,eAAiB,uCAsSpC,MAAMsD,EACX,4CAAaC,CAAgCC,GAC3C,MAAMC,GAAgBC,EAAAA,EAAAA,GAAA,GAAQF,GAE9B,IAEE,IAAIG,EAAc,KAClB,IACEA,QAAoBvI,EAAkBC,eACpCmI,EAASnG,KACTmG,EAASjI,SAGPoI,IACFjI,QAAQiE,IAAI,sCAAD9D,OAAkC2H,EAASnG,OACtDoG,EAAiB/F,MAAQiG,EAE7B,CAAE,MAAO9G,GACPnB,QAAQC,KAAK,8BAADE,OAA+B2H,EAASnG,KAAI,KAAKR,EAC/D,CAGA,IAAK8G,EAAa,CAChB,MAAMvG,QAAqBJ,EAAsBC,gBAC/CuG,EAASnG,KACTmG,EAASjI,SAGP6B,IACGqG,EAAiB/F,QACpB+F,EAAiB/F,MAAQN,EAAaM,OAExC+F,EAAiBG,iBAAmBxG,EAAaS,SAErD,CAGA,MAAMgG,QAAoBjF,EAAiB4D,4BACzCgB,EAASnG,KACTmG,EAASjI,SAGXkI,EAAiBrE,QAAUyE,EAAYzE,QACvCqE,EAAiBK,YAAcD,EAAYnB,MAE7C,CAAE,MAAO7F,GACPnB,QAAQmB,MAAM,iCAAkCA,EAClD,CAEA,OAAO4G,CACT,E","sources":["services/externalData.ts"],"sourcesContent":["// External data services for OneMap and MUIS integration\n\nexport interface OneMapBusinessInfo {\n  name: string;\n  address: string;\n  postal: string;\n  operating_hours?: {\n    monday?: string;\n    tuesday?: string;\n    wednesday?: string;\n    thursday?: string;\n    friday?: string;\n    saturday?: string;\n    sunday?: string;\n  };\n  phone?: string;\n  category?: string;\n}\n\nexport interface MUISHalalInfo {\n  establishment_name: string;\n  address: string;\n  postal_code: string;\n  certificate_no: string;\n  valid_from: string;\n  valid_to: string;\n  status: string;\n  halal_type: string;\n}\n\n// Google Maps Places API Integration\nexport class GoogleMapsService {\n  private static readonly GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n  private static readonly PLACES_API_URL = 'https://maps.googleapis.com/maps/api/place';\n  \n  // Get phone number from Google Places API\n  static async getPhoneNumber(merchantName: string, address: string): Promise<string | null> {\n    if (!this.GOOGLE_MAPS_API_KEY) {\n      console.warn('Google Maps API key not configured');\n      return null;\n    }\n    \n    try {\n      // First, search for the place to get place_id\n      const searchQuery = `${merchantName} ${address} Singapore`;\n      const searchResponse = await fetch(\n        `${this.PLACES_API_URL}/textsearch/json?query=${encodeURIComponent(searchQuery)}&key=${this.GOOGLE_MAPS_API_KEY}`\n      );\n      \n      if (!searchResponse.ok) return null;\n      \n      const searchData = await searchResponse.json();\n      \n      if (searchData.results && searchData.results.length > 0) {\n        const placeId = searchData.results[0].place_id;\n        \n        // Get detailed place information including phone number\n        const detailsResponse = await fetch(\n          `${this.PLACES_API_URL}/details/json?place_id=${placeId}&fields=formatted_phone_number&key=${this.GOOGLE_MAPS_API_KEY}`\n        );\n        \n        if (!detailsResponse.ok) return null;\n        \n        const detailsData = await detailsResponse.json();\n        \n        return detailsData.result?.formatted_phone_number || null;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Google Maps API error:', error);\n      return null;\n    }\n  }\n\n\n}\n\n// OneMap Business Directory Integration\nexport class OneMapBusinessService {\n  private static readonly BASE_URL = 'https://developers.onemap.sg/privateapi/popapi/getAllPOIs';\n  private static readonly SEARCH_URL = 'https://developers.onemap.sg/commonapi/search';\n  \n  // Get business information including operating hours\n  static async getBusinessInfo(merchantName: string, address: string): Promise<OneMapBusinessInfo | null> {\n    try {\n      // Search for the business using name and address\n      const searchResponse = await fetch(\n        `${this.SEARCH_URL}?searchVal=${encodeURIComponent(merchantName + ' ' + address)}&returnGeom=Y&getAddrDetails=Y`\n      );\n      \n      if (!searchResponse.ok) return null;\n      \n      const searchData = await searchResponse.json();\n      \n      if (searchData.found > 0 && searchData.results.length > 0) {\n        const result = searchData.results[0];\n        \n        // Extract basic info\n        const businessInfo: OneMapBusinessInfo = {\n          name: result.SEARCHVAL || merchantName,\n          address: result.ADDRESS || address,\n          postal: result.POSTAL || '',\n          phone: result.PHONE || undefined,\n          category: result.CATEGORY || undefined\n        };\n        \n        // Try to get additional POI data for operating hours\n        // Note: OneMap's POI API might require authentication\n        // For now, we'll use pattern matching based on business type\n        businessInfo.operating_hours = this.estimateHoursFromCategory(result.CATEGORY || merchantName);\n        \n        return businessInfo;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('OneMap API error:', error);\n      return null;\n    }\n  }\n  \n  // Estimate operating hours based on business category\n  private static estimateHoursFromCategory(category: string): OneMapBusinessInfo['operating_hours'] {\n    const cat = category.toLowerCase();\n    \n    if (cat.includes('restaurant') || cat.includes('food') || cat.includes('dining')) {\n      return {\n        monday: '11:00-22:00',\n        tuesday: '11:00-22:00',\n        wednesday: '11:00-22:00',\n        thursday: '11:00-22:00',\n        friday: '11:00-23:00',\n        saturday: '11:00-23:00',\n        sunday: '11:00-22:00'\n      };\n    }\n    \n    if (cat.includes('coffee') || cat.includes('cafe') || cat.includes('breakfast')) {\n      return {\n        monday: '07:00-15:00',\n        tuesday: '07:00-15:00',\n        wednesday: '07:00-15:00',\n        thursday: '07:00-15:00',\n        friday: '07:00-15:00',\n        saturday: '07:00-15:00',\n        sunday: '08:00-14:00'\n      };\n    }\n    \n    if (cat.includes('supermarket') || cat.includes('grocery') || cat.includes('mart')) {\n      return {\n        monday: '08:00-22:00',\n        tuesday: '08:00-22:00',\n        wednesday: '08:00-22:00',\n        thursday: '08:00-22:00',\n        friday: '08:00-22:00',\n        saturday: '08:00-22:00',\n        sunday: '08:00-21:00'\n      };\n    }\n    \n    if (cat.includes('massage') || cat.includes('spa') || cat.includes('wellness')) {\n      return {\n        monday: '10:00-22:00',\n        tuesday: '10:00-22:00',\n        wednesday: '10:00-22:00',\n        thursday: '10:00-22:00',\n        friday: '10:00-22:00',\n        saturday: '10:00-22:00',\n        sunday: '10:00-20:00'\n      };\n    }\n    \n    // Default business hours\n    return {\n      monday: '09:00-18:00',\n      tuesday: '09:00-18:00',\n      wednesday: '09:00-18:00',\n      thursday: '09:00-18:00',\n      friday: '09:00-18:00',\n      saturday: '09:00-17:00',\n      sunday: 'Closed'\n    };\n  }\n}\n\n// MUIS Halal Certification Service\nexport class MUISHalalService {\n  private static readonly MUIS_API_URL = 'https://halal.muis.gov.sg/api/halal/establishments';\n  private static halalCache: Map<string, { isHalal: boolean; details: any }> = new Map();\n  private static lastCacheUpdate: Date | null = null;\n  private static readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n  private static readonly ENABLE_BROWSER_API_CALLS = true; // Use proxy server for real MUIS verification\n  private static readonly MUIS_PROXY_URL = 'http://localhost:3001/api/muis-halal'; // Local proxy server\n  \n  // Check if establishment is halal certified using MUIS API\n  static async isHalalCertified(merchantName: string, address: string): Promise<boolean> {\n    try {\n      // Check cache first\n      const cacheKey = `${merchantName}_${address}`.toLowerCase();\n      if (this.halalCache.has(cacheKey) && this.isCacheValid()) {\n        return this.halalCache.get(cacheKey)?.isHalal || false;\n      }\n      \n      // Try MUIS API first\n      const muisResult = await this.checkMUISAPI(merchantName);\n      \n      if (muisResult !== null) {\n        // Cache MUIS result\n        this.halalCache.set(cacheKey, { isHalal: muisResult.isHalal, details: muisResult.details });\n        this.lastCacheUpdate = new Date();\n        console.log(`✅ MUIS API verified: ${merchantName} - ${muisResult.isHalal ? 'HALAL' : 'NOT CERTIFIED'}`);\n        return muisResult.isHalal;\n      }\n      \n      // Fallback to keyword detection if MUIS API fails\n      console.warn(`⚠️ MUIS API failed for ${merchantName}, using keyword detection`);\n      const keywordResult = await this.checkHalalByKeywords(merchantName, address);\n      \n      // Cache keyword result\n      this.halalCache.set(cacheKey, { isHalal: keywordResult, details: null });\n      this.lastCacheUpdate = new Date();\n      \n      return keywordResult;\n    } catch (error) {\n      console.error('MUIS Halal check error:', error);\n      // Final fallback to keyword detection\n      return this.checkHalalByKeywords(merchantName, address);\n    }\n  }\n  \n  // Check MUIS API for halal certification\n  private static async checkMUISAPI(merchantName: string): Promise<{ isHalal: boolean; details: any } | null> {\n    try {\n      // Use proxy server for browser environments to handle CSRF\n      const apiUrl = typeof window !== 'undefined' ? this.MUIS_PROXY_URL : this.MUIS_API_URL;\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          text: merchantName.trim()\n        })\n      });\n      \n      if (!response.ok) {\n        if (response.status === 400) {\n          console.warn(`🔒 MUIS API requires CSRF token (${response.status}) for: ${merchantName}`);\n          console.info('💡 Consider setting up a proxy server for full MUIS integration');\n        } else {\n          console.warn(`MUIS API returned ${response.status} for: ${merchantName}`);\n        }\n        return null;\n      }\n      \n      const apiResponse = await response.json();\n      \n      // Handle proxy server response format vs direct MUIS API format\n      let establishments = [];\n      if (apiResponse.results && Array.isArray(apiResponse.results)) {\n        // Proxy server response format\n        establishments = apiResponse.results;\n        console.log(`📡 Proxy server response: ${apiResponse.totalRecords} total records`);\n      } else if (apiResponse.data && Array.isArray(apiResponse.data)) {\n        // Direct MUIS API response format\n        establishments = apiResponse.data;\n      }\n      \n      if (establishments.length === 0) {\n        // No results means not certified\n        return {\n          isHalal: false,\n          details: null\n        };\n      }\n        \n        // Check if any establishment is a close match to our merchant name\n        const merchantNameLower = merchantName.toLowerCase();\n        const matchingEstablishment = establishments.find((establishment: any) => {\n          const establishmentName = establishment.name.toLowerCase();\n          \n          // Direct name match\n          if (establishmentName.includes(merchantNameLower) || merchantNameLower.includes(establishmentName)) {\n            return true;\n          }\n          \n          // Check for partial matches (removing common words)\n          const cleanMerchantName = merchantNameLower\n            .replace(/\\b(pte|ltd|singapore|s\\)|restaurant|cafe|food|stall|@|#\\d+|\\(.*?\\))\\b/g, '')\n            .trim();\n          const cleanEstablishmentName = establishmentName\n            .replace(/\\b(pte|ltd|singapore|s\\)|restaurant|cafe|food|stall|@|#\\d+|\\(.*?\\))\\b/g, '')\n            .trim();\n          \n          // Check if core names match (minimum 3 characters)\n          if (cleanMerchantName.length >= 3 && cleanEstablishmentName.length >= 3) {\n            // Try both directions for partial matches\n            if (cleanEstablishmentName.includes(cleanMerchantName) || \n                cleanMerchantName.includes(cleanEstablishmentName)) {\n              return true;\n            }\n            \n            // Check word-by-word matching for compound names\n            const merchantWords = cleanMerchantName.split(' ').filter((word: string) => word.length >= 3);\n            const establishmentWords = cleanEstablishmentName.split(' ').filter((word: string) => word.length >= 3);\n            \n            // If at least 2 significant words match, consider it a match\n            const matchingWords = merchantWords.filter((word: string) => \n              establishmentWords.some((estWord: string) => estWord.includes(word) || word.includes(estWord))\n            );\n            \n            if (matchingWords.length >= 2 || \n                (merchantWords.length <= 2 && matchingWords.length >= 1)) {\n              return true;\n            }\n          }\n          \n          return false;\n        });\n        \n        if (matchingEstablishment) {\n          console.log(`🕌 MUIS VERIFIED: ${merchantName} matches \"${matchingEstablishment.name}\" (Cert: ${matchingEstablishment.number})`);\n          return {\n            isHalal: true,\n            details: {\n              matchedEstablishment: matchingEstablishment,\n              totalFound: establishments.length,\n              searchResults: establishments\n            }\n          };\n        }\n        \n        // Found results but no close match\n        console.log(`⚠️ MUIS: Found ${establishments.length} results for \"${merchantName}\" but no close matches`);\n        return {\n          isHalal: false,\n          details: {\n            searchResults: establishments,\n            totalFound: establishments.length\n          }\n        };\n      \n      // Invalid response format\n      console.warn('MUIS API returned unexpected response format');\n      return null;\n      \n    } catch (error) {\n      // Handle CORS errors gracefully\n      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\n        console.warn(`🚫 MUIS API CORS blocked for: ${merchantName}. This is expected when running from browser.`);\n        console.info('💡 MUIS API integration works best from server-side or with proxy setup');\n      } else {\n        console.error('Error calling MUIS API:', error);\n      }\n      return null;\n    }\n  }\n  \n  // Get halal certification status with source information\n  static async getHalalCertificationStatus(merchantName: string, address: string): Promise<{ isHalal: boolean; source: string }> {\n    try {\n      // Skip MUIS API in browser environment if disabled to avoid CSRF errors\n      if (typeof window !== 'undefined' && !this.ENABLE_BROWSER_API_CALLS) {\n        // Use enhanced keyword detection in browser to avoid CSRF issues\n        const keywordResult = await this.checkHalalByKeywords(merchantName, address);\n        return {\n          isHalal: keywordResult,\n          source: keywordResult ? 'KEYWORD_DETECTED' : 'NOT_DETECTED'\n        };\n      }\n      \n      // Server-side: Try MUIS API first\n      const cleanMerchantName = this.cleanMerchantNameForSearch(merchantName);\n      console.log(`🔍 Checking MUIS API for CDC merchant: \"${merchantName}\" (cleaned: \"${cleanMerchantName}\")`);\n      const muisResult = await this.checkMUISAPI(cleanMerchantName);\n      \n      if (muisResult !== null) {\n        const source = muisResult.isHalal ? 'MUIS_VERIFIED' : 'MUIS_NOT_FOUND';\n        console.log(`🕌 MUIS Result for \"${merchantName}\": ${muisResult.isHalal ? 'HALAL CERTIFIED' : 'NOT CERTIFIED'} (${source})`);\n        return {\n          isHalal: muisResult.isHalal,\n          source: source\n        };\n      }\n      \n      // Fallback to enhanced keyword detection\n      console.info(`🔍 MUIS API unavailable, using enhanced keyword detection for: ${merchantName}`);\n      const keywordResult = await this.checkHalalByKeywords(merchantName, address);\n      return {\n        isHalal: keywordResult,\n        source: keywordResult ? 'KEYWORD_DETECTED' : 'NOT_DETECTED'\n      };\n      \n    } catch (error) {\n      console.error('Error getting halal certification status:', error);\n      // Final fallback\n      const keywordResult = await this.checkHalalByKeywords(merchantName, address);\n      return {\n        isHalal: keywordResult,\n        source: keywordResult ? 'KEYWORD_DETECTED' : 'NOT_DETECTED'\n      };\n    }\n  }\n  \n  // Clean merchant name for better MUIS API searching\n  private static cleanMerchantNameForSearch(merchantName: string): string {\n    return merchantName\n      // Remove common business suffixes\n      .replace(/\\b(pte ltd|pte|ltd|singapore|s'pore|sgp)\\b/gi, '')\n      // Remove stall numbers and location indicators\n      .replace(/#\\d+[-\\w]*|\\(.*?\\)|@.*$/gi, '')\n      // Remove extra whitespace\n      .trim()\n      // Use first few meaningful words if name is too long\n      .split(' ')\n      .slice(0, 4)\n      .join(' ')\n      .trim();\n  }\n  \n  // Fallback method using keywords (enhanced version)\n  private static async checkHalalByKeywords(merchantName: string, address: string): Promise<boolean> {\n    const text = `${merchantName} ${address}`.toLowerCase();\n    \n    const halalKeywords = [\n      // Direct halal indicators\n      'halal', 'muslim', 'islamic', 'bismillah', 'assalam', 'salam',\n      \n      // Cuisine types commonly halal\n      'turkish', 'arab', 'arabian', 'middle east', 'lebanese', 'moroccan',\n      'pakistani', 'afghan', 'persian', 'kurdish',\n      \n      // Malay/Indonesian (high probability)\n      'warung', 'nasi padang', 'makan', 'warong', 'mamak',\n      'rendang', 'satay', 'gado gado', 'nasi lemak', 'laksa',\n      \n      // Indian Muslim\n      'biryani', 'tandoor', 'mutton', 'kebab', 'korma',\n      \n      // Business names indicating halal\n      'al-', 'ibn', 'abu', 'fatimah', 'aisha', 'khadijah',\n      'rahman', 'rahim', 'allah', 'mosque', 'masjid'\n    ];\n    \n    const nonHalalKeywords = [\n      'pork', 'bacon', 'ham', 'char siew', 'siu mai',\n      'wine', 'beer', 'alcohol', 'bar', 'pub'\n    ];\n    \n    // Check for non-halal indicators first\n    if (nonHalalKeywords.some(keyword => text.includes(keyword))) {\n      return false;\n    }\n    \n    // Check for halal indicators\n    return halalKeywords.some(keyword => text.includes(keyword));\n  }\n  \n  // Get full halal certification details (if API access available)\n  static async getHalalCertificationDetails(merchantName: string): Promise<MUISHalalInfo | null> {\n    try {\n      // This would require actual MUIS API integration\n      // For now, return null as placeholder\n      console.log(`Getting MUIS certification for: ${merchantName}`);\n      return null;\n    } catch (error) {\n      console.error('MUIS certification details error:', error);\n      return null;\n    }\n  }\n  \n  private static isCacheValid(): boolean {\n    if (!this.lastCacheUpdate) return false;\n    return (Date.now() - this.lastCacheUpdate.getTime()) < this.CACHE_DURATION;\n  }\n  \n  // Clear cache manually if needed\n  static clearCache(): void {\n    this.halalCache.clear();\n    this.lastCacheUpdate = null;\n  }\n}\n\n// Combined data enhancement service\nexport class DataEnhancementService {\n  static async enhanceMerchantWithExternalData(merchant: any) {\n    const enhancedMerchant = { ...merchant };\n    \n    try {\n      // Priority 1: Try Google Maps for phone number\n      let googlePhone = null;\n      try {\n        googlePhone = await GoogleMapsService.getPhoneNumber(\n          merchant.name,\n          merchant.address\n        );\n        \n        if (googlePhone) {\n          console.log(`✅ Google Maps phone found for ${merchant.name}`);\n          enhancedMerchant.phone = googlePhone;\n        }\n      } catch (error) {\n        console.warn(`Google Maps API failed for ${merchant.name}:`, error);\n      }\n      \n      // Priority 2: Fallback to OneMap if Google Maps failed for phone\n      if (!googlePhone) {\n        const businessInfo = await OneMapBusinessService.getBusinessInfo(\n          merchant.name,\n          merchant.address\n        );\n        \n        if (businessInfo) {\n          if (!enhancedMerchant.phone) {\n            enhancedMerchant.phone = businessInfo.phone;\n          }\n          enhancedMerchant.businessCategory = businessInfo.category;\n        }\n      }\n      \n      // Get halal certification from MUIS\n      const halalResult = await MUISHalalService.getHalalCertificationStatus(\n        merchant.name,\n        merchant.address\n      );\n      \n      enhancedMerchant.isHalal = halalResult.isHalal;\n      enhancedMerchant.halalSource = halalResult.source;\n      \n    } catch (error) {\n      console.error('Error enhancing merchant data:', error);\n    }\n    \n    return enhancedMerchant;\n  }\n}\n"],"names":["GoogleMapsService","getPhoneNumber","merchantName","address","this","GOOGLE_MAPS_API_KEY","console","warn","searchQuery","concat","searchResponse","fetch","PLACES_API_URL","encodeURIComponent","ok","searchData","json","results","length","_detailsData$result","placeId","place_id","detailsResponse","result","formatted_phone_number","error","process","REACT_APP_GOOGLE_MAPS_API_KEY","OneMapBusinessService","getBusinessInfo","SEARCH_URL","found","businessInfo","name","SEARCHVAL","ADDRESS","postal","POSTAL","phone","PHONE","undefined","category","CATEGORY","operating_hours","estimateHoursFromCategory","cat","toLowerCase","includes","monday","tuesday","wednesday","thursday","friday","saturday","sunday","BASE_URL","MUISHalalService","isHalalCertified","cacheKey","_this$halalCache$get","halalCache","has","isCacheValid","get","isHalal","muisResult","checkMUISAPI","set","details","lastCacheUpdate","Date","log","keywordResult","checkHalalByKeywords","apiUrl","window","MUIS_PROXY_URL","MUIS_API_URL","response","method","headers","body","JSON","stringify","text","trim","status","info","apiResponse","establishments","Array","isArray","totalRecords","data","merchantNameLower","matchingEstablishment","find","establishment","establishmentName","cleanMerchantName","replace","cleanEstablishmentName","merchantWords","split","filter","word","establishmentWords","matchingWords","some","estWord","number","matchedEstablishment","totalFound","searchResults","TypeError","message","getHalalCertificationStatus","ENABLE_BROWSER_API_CALLS","source","cleanMerchantNameForSearch","slice","join","keyword","getHalalCertificationDetails","now","getTime","CACHE_DURATION","clearCache","clear","Map","DataEnhancementService","enhanceMerchantWithExternalData","merchant","enhancedMerchant","_objectSpread","googlePhone","businessCategory","halalResult","halalSource"],"sourceRoot":""}