{"version":3,"file":"static/js/887.a3697555.chunk.js","mappings":"0IAEO,MAAMA,EAAiBC,UAC5B,IAEEC,QAAQC,IAAI,2BAA4BC,GACxC,MAAMC,QAAiBC,MAAMF,GAC7B,GAAIC,EAASE,GAAI,CACf,MAAMC,QAAaH,EAASI,OAE5B,OADAP,QAAQC,IAAI,2BAA4BK,GACjCA,CACT,CACA,MAAM,IAAIE,MAAM,wBAADC,OAAyBN,EAASO,OAAM,KAAAD,OAAIN,EAASQ,YACtE,CAAE,MAAOC,GACPZ,QAAQa,KAAK,+CAAgDD,GAG7D,IACE,MAAME,EAAQ,sCAAAL,OAAyCM,mBAAmBb,IAC1EF,QAAQC,IAAI,2BAA4Ba,GACxC,MAAME,QAAsBZ,MAAMU,GAClC,GAAIE,EAAcX,GAAI,CACpB,MAAMY,QAAkBD,EAAcT,OAChCD,EAAOY,KAAKC,MAAMF,EAAUG,UAElC,OADApB,QAAQC,IAAI,0BAA2BK,GAChCA,CACT,CACA,MAAM,IAAIE,MAAM,uBAADC,OAAwBO,EAAcN,QACvD,CAAE,MAAOW,GACPrB,QAAQa,KAAK,2BAA4BQ,EAC3C,CAGA,IACE,MAAMC,EAAY,uCAAAb,OAA0CP,GAC5DF,QAAQC,IAAI,8BAA+BqB,GAC3C,MAAMC,QAAqBnB,MAAMkB,GACjC,GAAIC,EAAalB,GAAI,CACnB,MAAMC,QAAaiB,EAAahB,OAEhC,OADAP,QAAQC,IAAI,+BAAgCK,GACrCA,CACT,CACA,MAAM,IAAIE,MAAM,4BAADC,OAA6Bc,EAAab,QAC3D,CAAE,MAAOc,GACPxB,QAAQa,KAAK,qBAAsBW,EACrC,CAGA,IACE,MAAMC,EAAa,+BAAAhB,OAAkCM,mBAAmBb,IACxEF,QAAQC,IAAI,sBAAuBwB,GACnC,MAAMC,QAAsBtB,MAAMqB,GAClC,GAAIC,EAAcrB,GAAI,CACpB,MAAMC,QAAaoB,EAAcnB,OAEjC,OADAP,QAAQC,IAAI,gCAAiCK,GACtCA,CACT,CACA,MAAM,IAAIE,MAAM,6BAADC,OAA8BiB,EAAchB,QAC7D,CAAE,MAAOiB,GACP3B,QAAQa,KAAK,sBAAuBc,EACtC,CAOA,OAJA3B,QAAQY,MAAM,+BAAgCV,GAC9CF,QAAQY,MAAM,6DACdZ,QAAQY,MAAM,gFAEP,CACLgB,MAAO,EACPC,cAAe,EACfC,QAAS,EACTC,QAAS,GACTnB,MAAO,kBAEX,E","sources":["utils/proxyUtils.ts"],"sourcesContent":["// Proxy utility to handle CORS issues with CDC API - Real API only\n\nexport const fetchWithProxy = async (url: string) => {\n  try {\n    // Try direct fetch first\n    console.log('Attempting direct fetch:', url);\n    const response = await fetch(url);\n    if (response.ok) {\n      const data = await response.json();\n      console.log('Direct fetch successful:', data);\n      return data;\n    }\n    throw new Error(`Direct fetch failed: ${response.status} ${response.statusText}`);\n  } catch (error) {\n    console.warn('Direct fetch failed, trying proxy methods...', error);\n    \n    // Fallback 1: Use allorigins proxy service\n    try {\n      const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`;\n      console.log('Trying allorigins proxy:', proxyUrl);\n      const proxyResponse = await fetch(proxyUrl);\n      if (proxyResponse.ok) {\n        const proxyData = await proxyResponse.json();\n        const data = JSON.parse(proxyData.contents);\n        console.log('Proxy fetch successful:', data);\n        return data;\n      }\n      throw new Error(`Proxy fetch failed: ${proxyResponse.status}`);\n    } catch (proxyError) {\n      console.warn('Allorigins proxy failed:', proxyError);\n    }\n    \n    // Fallback 2: Use cors-anywhere proxy (requires activation)\n    try {\n      const corsProxyUrl = `https://cors-anywhere.herokuapp.com/${url}`;\n      console.log('Trying cors-anywhere proxy:', corsProxyUrl);\n      const corsResponse = await fetch(corsProxyUrl);\n      if (corsResponse.ok) {\n        const data = await corsResponse.json();\n        console.log('CORS proxy fetch successful:', data);\n        return data;\n      }\n      throw new Error(`CORS proxy fetch failed: ${corsResponse.status}`);\n    } catch (corsError) {\n      console.warn('CORS proxy failed:', corsError);\n    }\n    \n    // Fallback 3: Try another public CORS proxy\n    try {\n      const jsonpProxyUrl = `https://jsonp.afeld.me/?url=${encodeURIComponent(url)}`;\n      console.log('Trying jsonp proxy:', jsonpProxyUrl);\n      const jsonpResponse = await fetch(jsonpProxyUrl);\n      if (jsonpResponse.ok) {\n        const data = await jsonpResponse.json();\n        console.log('JSONP proxy fetch successful:', data);\n        return data;\n      }\n      throw new Error(`JSONP proxy fetch failed: ${jsonpResponse.status}`);\n    } catch (jsonpError) {\n      console.warn('JSONP proxy failed:', jsonpError);\n    }\n    \n    // If all real API attempts fail, return empty result\n    console.error('All API attempts failed for:', url);\n    console.error('This might be due to CORS restrictions or network issues.');\n    console.error('Consider setting up a backend proxy or using the app from a deployed domain.');\n    \n    return {\n      found: 0,\n      totalNumPages: 0,\n      pageNum: 1,\n      results: [],\n      error: 'API_UNAVAILABLE'\n    };\n  }\n};\n"],"names":["fetchWithProxy","async","console","log","url","response","fetch","ok","data","json","Error","concat","status","statusText","error","warn","proxyUrl","encodeURIComponent","proxyResponse","proxyData","JSON","parse","contents","proxyError","corsProxyUrl","corsResponse","corsError","jsonpProxyUrl","jsonpResponse","jsonpError","found","totalNumPages","pageNum","results"],"sourceRoot":""}