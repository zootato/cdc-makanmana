{"version":3,"file":"static/js/248.e4a4010b.chunk.js","mappings":"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","sources":["services/halalService.ts"],"sourcesContent":["import { Merchant } from '../data/merchants';\n\ninterface HalalEstablishment {\n  name: string;\n  address: string;\n  type: string;\n  number: string;\n  scheme: string;\n  id: string;\n  postal: string;\n}\n\nexport class HalalService {\n  private static halalEstablishments: HalalEstablishment[] = [];\n  private static initialized = false;\n\n  static async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Fetch directly from GitHub API endpoint\n      const response = await fetch('https://raw.githubusercontent.com/zootato/singapore-halal-establishments/main/halal_establishments.json');\n\n      if (!response.ok) {\n        throw new Error(`GitHub API returned ${response.status}`);\n      }\n\n      this.halalEstablishments = await response.json();\n      this.initialized = true;\n      console.log(`Loaded ${this.halalEstablishments.length} halal establishments from GitHub`);\n    } catch (error) {\n      console.error('Failed to load halal establishments from GitHub:', error);\n      this.halalEstablishments = [];\n      this.initialized = true;\n    }\n  }\n\n  static async isHalal(merchant: Merchant): Promise<{ isHalal: boolean; source: string; certNumber?: string }> {\n    await this.initialize();\n\n    // Primary matching: Find the best name match\n    const bestMatch = this.findBestNameMatch(merchant.name, merchant.postalCode);\n\n    if (bestMatch) {\n      return {\n        isHalal: true,\n        source: bestMatch.source,\n        certNumber: bestMatch.establishment.number\n      };\n    }\n\n    // Only return halal if found in official records\n    return {\n      isHalal: false,\n      source: 'NOT_IN_OFFICIAL_RECORDS'\n    };\n  }\n\n  private static findBestNameMatch(merchantName: string, merchantPostal: string): { establishment: HalalEstablishment; source: string } | null {\n    const cleanMerchantName = this.cleanName(merchantName);\n\n    // 1. Perfect match: Exact name + postal confirmation\n    const exactNameMatch = this.halalEstablishments.find(halal =>\n      this.cleanName(halal.name) === cleanMerchantName\n    );\n\n    if (exactNameMatch) {\n      if (exactNameMatch.postal === merchantPostal) {\n        return { establishment: exactNameMatch, source: 'MUIS_VERIFIED_EXACT_POSTAL' };\n      }\n      return { establishment: exactNameMatch, source: 'MUIS_VERIFIED_EXACT_NAME' };\n    }\n\n    // 2. High similarity match with postal confirmation\n    const merchantWords = cleanMerchantName.split(' ').filter(word => word.length > 2);\n    let bestMatch: { establishment: HalalEstablishment; similarity: number; hasPostal: boolean } | null = null;\n\n    for (const halal of this.halalEstablishments) {\n      const halalWords = this.cleanName(halal.name).split(' ').filter(word => word.length > 2);\n\n      // Calculate similarity score\n      const matchingWords = merchantWords.filter(word =>\n        halalWords.some(halalWord =>\n          halalWord.includes(word) || word.includes(halalWord) || this.isWordSimilar(word, halalWord)\n        )\n      );\n\n      const similarity = matchingWords.length / Math.max(merchantWords.length, halalWords.length);\n      const hasPostalMatch = halal.postal === merchantPostal;\n\n      // VERY STRICT: Require 90% similarity + at least 2 key words + significant overlap\n      if (similarity >= 0.9 && matchingWords.length >= 2 && merchantWords.length >= 2) {\n        console.log(`🕌 POTENTIAL HALAL MATCH:\n          CDC: \"${merchantName}\" (postal: ${merchantPostal})\n          MUIS: \"${halal.name}\" (postal: ${halal.postal})\n          Similarity: ${(similarity * 100).toFixed(1)}%\n          Matching words: [${matchingWords.join(', ')}]\n          Postal match: ${hasPostalMatch ? '✅' : '❌'}`);\n\n        if (!bestMatch ||\n            (hasPostalMatch && !bestMatch.hasPostal) || // Strongly prefer postal matches\n            (hasPostalMatch === bestMatch.hasPostal && similarity > bestMatch.similarity)) {\n          bestMatch = { establishment: halal, similarity, hasPostal: hasPostalMatch };\n        }\n      }\n    }\n\n    if (bestMatch) {\n      const result = bestMatch.hasPostal\n        ? { establishment: bestMatch.establishment, source: 'MUIS_VERIFIED_SIMILAR_POSTAL' }\n        : { establishment: bestMatch.establishment, source: 'MUIS_VERIFIED_SIMILAR_NAME' };\n\n      console.log(`✅ HALAL CONFIRMED: \"${merchantName}\" → \"${bestMatch.establishment.name}\" (Cert: ${bestMatch.establishment.number})`);\n      return result;\n    }\n\n    console.log(`❌ NOT HALAL: \"${merchantName}\" - no match found in MUIS database`);\n    return null;\n  }\n\n  private static isWordSimilar(word1: string, word2: string): boolean {\n    // Check for common abbreviations and variations\n    const commonVariations: { [key: string]: string[] } = {\n      'restaurant': ['rest', 'resto'],\n      'kitchen': ['kitchn', 'kitch'],\n      'food': ['fd'],\n      'house': ['hse'],\n      'corner': ['cnr'],\n      'centre': ['center', 'ctr'],\n      'international': ['intl'],\n      'company': ['co'],\n      'private': ['pte', 'pvt'],\n      'limited': ['ltd']\n    };\n\n    for (const [full, abbrevs] of Object.entries(commonVariations)) {\n      if ((word1 === full && abbrevs.includes(word2)) ||\n          (word2 === full && abbrevs.includes(word1)) ||\n          (abbrevs.includes(word1) && abbrevs.includes(word2))) {\n        return true;\n      }\n    }\n\n    // Check for simple character similarity (at least 80% similar)\n    const longer = word1.length > word2.length ? word1 : word2;\n    const shorter = word1.length > word2.length ? word2 : word1;\n\n    if (longer.length === 0) return false;\n\n    const editDistance = this.levenshteinDistance(longer, shorter);\n    const similarity = (longer.length - editDistance) / longer.length;\n\n    return similarity >= 0.8;\n  }\n\n  private static levenshteinDistance(str1: string, str2: string): number {\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\n\n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\n\n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(\n          matrix[j][i - 1] + 1,\n          matrix[j - 1][i] + 1,\n          matrix[j - 1][i - 1] + indicator\n        );\n      }\n    }\n\n    return matrix[str2.length][str1.length];\n  }\n\n  private static cleanName(name: string): string {\n    return name\n      .toLowerCase()\n      .replace(/\\b(pte|ltd|private|limited|sdn|bhd)\\b/g, '')\n      .replace(/\\b(stall|#|unit|\\d+[a-z]?)\\s*\\d+/g, '')\n      .replace(/[^\\w\\s]/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n\n}"],"names":["HalalService","initialize","this","initialized","response","fetch","ok","Error","concat","status","halalEstablishments","json","console","log","length","error","isHalal","merchant","bestMatch","findBestNameMatch","name","postalCode","source","certNumber","establishment","number","merchantName","merchantPostal","cleanMerchantName","cleanName","exactNameMatch","find","halal","postal","merchantWords","split","filter","word","halalWords","matchingWords","some","halalWord","includes","isWordSimilar","similarity","Math","max","hasPostalMatch","toFixed","join","hasPostal","result","word1","word2","commonVariations","full","abbrevs","Object","entries","longer","shorter","editDistance","levenshteinDistance","str1","str2","matrix","Array","fill","map","i","j","indicator","min","toLowerCase","replace","trim"],"sourceRoot":""}